trigger:
- main

pool:
  name: AzureVM-Pool  # Or use 'vmImage: windows-latest' for Microsoft-hosted agents

variables:
  terraformVersion: '1.8.5'
  terraformPath: 'C:\terraform\terraform.exe'
  workingDir: '$(Build.SourcesDirectory)'  # Adjust if your .tf files are in a subfolder

steps:

# ------------------------------------------------------------
# 1. Checkout Repo
# ------------------------------------------------------------
- checkout: self

# ------------------------------------------------------------
# 2. Install Terraform (if not found)
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Install Terraform'
  inputs:
    targetType: 'inline'
    script: |
      if (-Not (Test-Path "$(terraformPath)")) {
        Write-Host "Installing Terraform $(terraformVersion)..."
        New-Item -ItemType Directory -Force -Path "C:\terraform" | Out-Null
        $zipUrl = "https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_windows_amd64.zip"
        Invoke-WebRequest -Uri $zipUrl -OutFile "terraform.zip"
        Expand-Archive -Path "terraform.zip" -DestinationPath "C:\terraform" -Force
        Write-Host "‚úÖ Terraform installed at $(terraformPath)"
      } else {
        Write-Host "‚úÖ Terraform already installed at $(terraformPath)"
      }

# ------------------------------------------------------------
# 3. Terraform Init
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Terraform Init'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "üìÅ Running Terraform Init from: $(workingDir)"
      & "$(terraformPath)" -chdir="$(workingDir)" init -input=false
      if ($LASTEXITCODE -ne 0) {
        Write-Error "Terraform init failed"
        exit $LASTEXITCODE
      }

  env:
    ARM_USE_OIDC: 'true'
    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
    ARM_TENANT_ID: $(AZURE_TENANT_ID)
    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)

# ------------------------------------------------------------
# 4. Terraform Validate
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Terraform Validate'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "üìÅ Running Terraform Validate from: $(workingDir)"
      & "$(terraformPath)" -chdir="$(workingDir)" validate
      if ($LASTEXITCODE -ne 0) {
        Write-Error "Terraform validate failed"
        exit $LASTEXITCODE
      }

  env:
    ARM_USE_OIDC: 'true'
    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
    ARM_TENANT_ID: $(AZURE_TENANT_ID)
    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)

# ------------------------------------------------------------
# 5. Terraform Plan
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Terraform Plan'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "üìÅ Running Terraform Plan from: $(workingDir)"
      & "$(terraformPath)" -chdir="$(workingDir)" plan -input=false -out=tfplan
      if ($LASTEXITCODE -ne 0) {
        Write-Error "Terraform plan failed"
        exit $LASTEXITCODE
      }

  env:
    ARM_USE_OIDC: 'true'
    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
    ARM_TENANT_ID: $(AZURE_TENANT_ID)
    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)

# ------------------------------------------------------------
# 6. Terraform Apply (Manual Runs Only)
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Terraform Apply'
  condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "üìÅ Running Terraform Apply from: $(workingDir)"
      & "$(terraformPath)" -chdir="$(workingDir)" apply -auto-approve tfplan
      if ($LASTEXITCODE -ne 0) {
        Write-Error "Terraform apply failed"
        exit $LASTEXITCODE
      }

  env:
    ARM_USE_OIDC: 'true'
    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
    ARM_TENANT_ID: $(AZURE_TENANT_ID)
    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
