pool:
  name: AzureVM-Pool

steps:
- task: AzurePowerShell@5
  displayName: 'Export OIDC env for Terraform (no Azure CLI)'
  inputs:
    azureSubscription: 'my-oidc-service-connection'
    ScriptType: InlineScript
    pwsh: true
    Inline: |
      if (-not $env:AZURE_CLIENT_ID -or -not $env:AZURE_TENANT_ID -or -not $env:AZURE_SUBSCRIPTION_ID -or -not $env:AZURE_FEDERATED_TOKEN_FILE) {
        throw "OIDC env not present. Ensure the service connection is Workload Identity Federation."
      }
      Write-Host "##vso[task.setvariable variable=ARM_USE_OIDC]true"
      Write-Host "##vso[task.setvariable variable=ARM_CLIENT_ID]$env:AZURE_CLIENT_ID"
      Write-Host "##vso[task.setvariable variable=ARM_TENANT_ID]$env:AZURE_TENANT_ID"
      Write-Host "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$env:AZURE_SUBSCRIPTION_ID"
      Write-Host "##vso[task.setvariable variable=ARM_OIDC_TOKEN_FILE]$env:AZURE_FEDERATED_TOKEN_FILE"
      # Pass IDs also as TF vars for your provider
      Write-Host "##vso[task.setvariable variable=TF_VAR_client_id]$env:AZURE_CLIENT_ID"
      Write-Host "##vso[task.setvariable variable=TF_VAR_tenant_id]$env:AZURE_TENANT_ID"
      Write-Host "##vso[task.setvariable variable=TF_VAR_subscription_id]$env:AZURE_SUBSCRIPTION_ID"

- powershell: |
    terraform -version
    terraform init -input=false
  displayName: 'Terraform init'
  env:
    ARM_USE_OIDC: $(ARM_USE_OIDC)
    ARM_CLIENT_ID: $(ARM_CLIENT_ID)
    ARM_TENANT_ID: $(ARM_TENANT_ID)
    ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
    ARM_OIDC_TOKEN_FILE: $(ARM_OIDC_TOKEN_FILE)

- powershell: |
    terraform plan -out=tfplan -input=false
  displayName: 'Terraform plan'
  env:
    ARM_USE_OIDC: $(ARM_USE_OIDC)
    ARM_CLIENT_ID: $(ARM_CLIENT_ID)
    ARM_TENANT_ID: $(ARM_TENANT_ID)
    ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
    ARM_OIDC_TOKEN_FILE: $(ARM_OIDC_TOKEN_FILE)

# - powershell: terraform apply -input=false -auto-approve tfplan
#   displayName: 'Terraform apply'
#   env: *same_as_above*