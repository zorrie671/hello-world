trigger:
- main  # Change to your branch name

pool:
  name: AzureVM-Pool  # Must match the pool where your Azure VM agent is registered
variables:
  terraformVersion: '1.8.5'  # Adjust as needed
  workingDir: 'C:\azagent'   # Direct path on your Azure VM

steps:
# 1. Detect Terraform files in C:\azagent
- task: PowerShell@2
  displayName: 'Detect Terraform Directory'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(workingDir)'
    script: |
      Write-Host "Checking for Terraform files in $(workingDir)"
      $tfFiles = Get-ChildItem -Path "$(workingDir)" -Filter *.tf -Recurse
      if ($tfFiles.Count -eq 0) {
        Write-Error "No Terraform (.tf) files found!"
        exit 1
      }

# 2. Install Terraform (skip if already installed)
- task: PowerShell@2
  displayName: 'Install Terraform'
  inputs:
    targetType: 'inline'
    script: |
      Invoke-WebRequest -Uri "https://releases.hashicorp.com/terraform/${env:terraformVersion}/terraform_${env:terraformVersion}_windows_amd64.zip" -OutFile "terraform.zip"
      Expand-Archive -Path "terraform.zip" -DestinationPath "C:\terraform"
      $env:PATH += ";C:\terraform"
      terraform -version

# 3. Terraform Init
- task: PowerShell@2
  displayName: 'Terraform Init'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(workingDir)'
    script: |
      terraform init

# 4. Terraform Validate
- task: PowerShell@2
  displayName: 'Terraform Validate'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(workingDir)'
    script: |
      terraform validate

# 5. Terraform Plan
- task: PowerShell@2
  displayName: 'Terraform Plan'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(workingDir)'
    script: |
      terraform plan -out=tfplan

# 6. Terraform Apply (optional)
- task: PowerShell@2
  displayName: 'Terraform Apply'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(workingDir)'
    script: |
      terraform apply -auto-approve tfplan