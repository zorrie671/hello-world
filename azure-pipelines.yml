trigger:
- main

pool:
  name: AzureVM-Pool

variables:
  terraformVersion: '1.8.5'
  terraformPath: 'C:\terraform\terraform.exe'
  workingDir: 'C:\azagent'

steps:
# 1. Detect Terraform files
- task: PowerShell@2
  displayName: 'Detect Terraform Directory'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(workingDir)'
    script: |
      Write-Host "Checking for Terraform files in $(workingDir)"
      $tfFiles = Get-ChildItem -Path "$(workingDir)" -Filter *.tf -Recurse
      if ($tfFiles.Count -eq 0) {
        Write-Error "No Terraform (.tf) files found!"
        exit 1
      }

# 2. Install Terraform (skip if already installed)
- task: PowerShell@2
  displayName: 'Install Terraform'
  inputs:
    targetType: 'inline'
    script: |
      if (-Not (Test-Path "$(terraformPath)")) {
        Write-Host "Terraform not found. Installing..."
        Invoke-WebRequest -Uri "https://releases.hashicorp.com/terraform/${env:terraformVersion}/terraform_${env:terraformVersion}_windows_amd64.zip" -OutFile "terraform.zip"
        Expand-Archive -Path "terraform.zip" -DestinationPath "C:\terraform" -Force
        Write-Host "Terraform installed at C:\terraform"
      } else {
        Write-Host "Terraform already installed at $(terraformPath). Skipping installation."
      }

# 3. Terraform Init
- task: PowerShell@2
  displayName: 'Terraform Init'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(workingDir)'
    script: |
      & "$(terraformPath)" init
  env:
    ARM_USE_OIDC: true
    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
    ARM_TENANT_ID: $(AZURE_TENANT_ID)
    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)

# 4. Terraform Validate
- task: PowerShell@2
  displayName: 'Terraform Validate'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(workingDir)'
    script: |
      & "$(terraformPath)" validate
  env:
    ARM_USE_OIDC: true
    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
    ARM_TENANT_ID: $(AZURE_TENANT_ID)
    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)

# 5. Terraform Plan
- task: PowerShell@2
  displayName: 'Terraform Plan'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(workingDir)'
    script: |
      & "$(terraformPath)" plan -out=tfplan
  env:
    ARM_USE_OIDC: true
    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
    ARM_TENANT_ID: $(AZURE_TENANT_ID)
    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)

# 6. Terraform Apply
- task: PowerShell@2
  displayName: 'Terraform Apply'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(workingDir)'
    script: |
      & "$(terraformPath)" apply -auto-approve tfplan
  env:
    ARM_USE_OIDC: true
    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
    ARM_TENANT_ID: $(AZURE_TENANT_ID)
    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)