trigger:
- main

pool:
  name: AzureVM-Pool  # Or use 'vmImage: windows-latest'

variables:
  terraformVersion: '1.8.5'
  terraformPath: 'C:\terraform\terraform.exe'
  workingDir: '$(Pipeline.Workspace)\tf'

steps:

# ------------------------------------------------------------
# 1. Checkout Repo
# ------------------------------------------------------------
- checkout: self

# ------------------------------------------------------------
# 2. Create Workspace Folder
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Create Workspace Folder'
  inputs:
    targetType: 'inline'
    script: |
      New-Item -ItemType Directory -Force -Path "$(workingDir)" | Out-Null

# ------------------------------------------------------------
# 3. Inject main.tf Inline
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Inject main.tf inline'
  inputs:
    targetType: 'inline'
    script: |
      $tf = @"
      provider "azurerm" {
        features {}
        use_oidc = true
      }

      resource "random_string" "random" {
        length = 16
      }
      "@

      $mainPath = "$(workingDir)\main.tf"
      Write-Host "Writing $mainPath"
      Set-Content -Path $mainPath -Value $tf

# ------------------------------------------------------------
# 4. Inject backend.tf Inline
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Inject backend.tf inline'
  inputs:
    targetType: 'inline'
    script: |
      $backend = @"
      terraform {
        required_providers {
          random = {
            source  = "hashicorp/random"
            version = "~> 3.0"
          }
        }

        backend "azurerm" {
          resource_group_name  = "rg"
          storage_account_name = "sa"
          container_name       = "tfstate"
          key                  = "terraform.tfstate"
        }
      }
      "@

      $backendPath = "$(workingDir)\backend.tf"
      Write-Host "Writing $backendPath"
      Set-Content -Path $backendPath -Value $backend

# ------------------------------------------------------------
# 5. Install Terraform
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Install Terraform'
  inputs:
    targetType: 'inline'
    script: |
      if (-Not (Test-Path "$(terraformPath)")) {
        Write-Host "Installing Terraform $(terraformVersion)..."
        New-Item -ItemType Directory -Force -Path "C:\terraform" | Out-Null
        $zipUrl = "https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_windows_amd64.zip"
        Invoke-WebRequest -Uri $zipUrl -OutFile "terraform.zip"
        Expand-Archive -Path "terraform.zip" -DestinationPath "C:\terraform" -Force
        Write-Host "‚úÖ Terraform installed at $(terraformPath)"
      } else {
        Write-Host "‚úÖ Terraform already installed at $(terraformPath)"
      }


#instal azure CLI

# ------------------------------------------------------------
# Install Azure CLI
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Install Azure CLI'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Installing Azure CLI..."
      Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile azure-cli.msi
      Start-Process msiexec.exe -Wait -ArgumentList '/I azure-cli.msi /quiet /qn /norestart'
      Write-Host "‚úÖ Azure CLI installed successfully"

# ------------------------------------------------------------
# 6. Terraform Init
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Terraform Init'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "üìÅ Running Terraform Init from: $(workingDir)"
      & "$(terraformPath)" -chdir="$(workingDir)" init -input=false
      if ($LASTEXITCODE -ne 0) {
        Write-Error "Terraform init failed"
        exit $LASTEXITCODE
      }
  env:
    ARM_USE_OIDC: 'true'
    ARM_CLIENT_ID: '$(AZURE_CLIENT_ID)'
    ARM_TENANT_ID: '$(AZURE_TENANT_ID)'
    ARM_SUBSCRIPTION_ID: '$(AZURE_SUBSCRIPTION_ID)'

# ------------------------------------------------------------
# 7. Terraform Plan
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Terraform Plan'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "üìÅ Running Terraform Plan from: $(workingDir)"
      & "$(terraformPath)" -chdir="$(workingDir)" plan -input=false -out=tfplan
      if ($LASTEXITCODE -ne 0) {
        Write-Error "Terraform plan failed"
        exit $LASTEXITCODE
      }
  env:
    ARM_USE_OIDC: 'true'
    ARM_CLIENT_ID: '$(AZURE_CLIENT_ID)'
    ARM_TENANT_ID: '$(AZURE_TENANT_ID)'
    ARM_SUBSCRIPTION_ID: '$(AZURE_SUBSCRIPTION_ID)'

# ------------------------------------------------------------
# 8. Terraform Apply (Manual Runs Only)
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Terraform Apply'
  condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "üìÅ Running Terraform Apply from: $(workingDir)"
      & "$(terraformPath)" -chdir="$(workingDir)" apply -auto-approve tfplan
      if ($LASTEXITCODE -ne 0) {
        Write-Error "Terraform apply failed"
        exit $LASTEXITCODE
      }
  env:
    ARM_USE_OIDC: 'true'
    ARM_CLIENT_ID: '$(AZURE_CLIENT_ID)'
    ARM_TENANT_ID: '$(AZURE_TENANT_ID)'
    ARM_SUBSCRIPTION_ID: '$(AZURE_SUBSCRIPTION_ID)'
