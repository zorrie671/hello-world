trigger:
- main

pool:
  name: AzureVM-Pool  # Or use vmImage: 'windows-latest' for Microsoft-hosted agents

variables:
  terraformVersion: '1.8.5'
  terraformPath: 'C:\terraform\terraform.exe'
  workingDir: '$(System.DefaultWorkingDirectory)'

steps:
# ------------------------------------------------------------
# 0. Display Working Directory (for debugging)
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'List files in working directory'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Current directory: $(System.DefaultWorkingDirectory)"
      Get-ChildItem -Path "$(System.DefaultWorkingDirectory)" -Recurse | Select-Object FullName

# ------------------------------------------------------------
# 1. Detect Terraform files
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Detect Terraform Directory'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(workingDir)'
    script: |
      Write-Host "Checking for Terraform files in $(workingDir)"
      $tfFiles = Get-ChildItem -Path "$(workingDir)" -Filter *.tf -Recurse
      if ($tfFiles.Count -eq 0) {
        Write-Error "❌ No Terraform (.tf) files found in $(workingDir)!"
        exit 1
      } else {
        Write-Host "✅ Terraform files detected."
      }

# ------------------------------------------------------------
# 2. Install Terraform (if not found)
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Install Terraform'
  inputs:
    targetType: 'inline'
    script: |
      if (-Not (Test-Path "$(terraformPath)")) {
        Write-Host "Terraform not found. Installing version $(terraformVersion)..."
        New-Item -ItemType Directory -Force -Path "C:\terraform" | Out-Null
        $zipUrl = "https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_windows_amd64.zip"
        Invoke-WebRequest -Uri $zipUrl -OutFile "terraform.zip"
        Expand-Archive -Path "terraform.zip" -DestinationPath "C:\terraform" -Force
        Write-Host "✅ Terraform installed at C:\terraform"
      } else {
        Write-Host "✅ Terraform already installed at $(terraformPath)."
      }

# ------------------------------------------------------------
# 3. Terraform Init
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Terraform Init'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(workingDir)'
    script: |
      & "$(terraformPath)" init -input=false
      if ($LASTEXITCODE -ne 0) {
        Write-Error "Terraform init failed with exit code $LASTEXITCODE"
        exit $LASTEXITCODE
      } else {
        Write-Host "✅ Terraform init completed successfully"
      }
  env:
    ARM_USE_OIDC: 'true'
    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
    ARM_TENANT_ID: $(AZURE_TENANT_ID)
    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)

# ------------------------------------------------------------
# 4. Terraform Validate
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Terraform Validate'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(workingDir)'
    script: |
      & "$(terraformPath)" validate
      if ($LASTEXITCODE -ne 0) {
        Write-Error "Terraform validate failed with exit code $LASTEXITCODE"
        exit $LASTEXITCODE
      } else {
        Write-Host "✅ Terraform validate completed successfully"
      }
  env:
    ARM_USE_OIDC: 'true'
    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
    ARM_TENANT_ID: $(AZURE_TENANT_ID)
    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)

# ------------------------------------------------------------
# 5. Terraform Plan
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Terraform Plan'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(workingDir)'
    script: |
      & "$(terraformPath)" plan -input=false -out=tfplan
      if ($LASTEXITCODE -ne 0) {
        Write-Error "Terraform plan failed with exit code $LASTEXITCODE"
        exit $LASTEXITCODE
      } else {
        Write-Host "✅ Terraform plan completed successfully"
      }
  env:
    ARM_USE_OIDC: 'true'
    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
    ARM_TENANT_ID: $(AZURE_TENANT_ID)
    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)

# ------------------------------------------------------------
# 6. Terraform Apply (manual runs only)
# ------------------------------------------------------------
- task: PowerShell@2
  displayName: 'Terraform Apply'
  condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
  inputs:
    targetType: 'inline'
    workingDirectory: '$(workingDir)'
    script: |
      & "$(terraformPath)" apply -auto-approve tfplan
      if ($LASTEXITCODE -ne 0) {
        Write-Error "Terraform apply failed with exit code $LASTEXITCODE"
        exit $LASTEXITCODE
      } else {
        Write-Host "✅ Terraform apply completed successfully"
      }
  env:
    ARM_USE_OIDC: 'true'
    ARM_CLIENT_ID: $(AZURE_CLIENT_ID)
    ARM_TENANT_ID: $(AZURE_TENANT_ID)
    ARM_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
