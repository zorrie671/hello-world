trigger:
  branches:
    include:
      - main

pool:
  name: windowsagent

variables:
  subscriptionId: '7b4156be-c801-4a1d-a9c5-418dc1158bb7'
  resourceGroup: 'rg-phillipg-dev'
  location: 'westus2'
  storageAccount: 'phillipgstorage'
  containerName: 'tfstate'
  keyVaultName: 'phillipg-kv'
  backendKey: 'terraform.tfstate'

# 1️⃣ Bootstrap backend resources (including Key Vault) first
steps:
- task: AzureCLI@2
  displayName: 'Bootstrap Azure Backend'
  inputs:
    azureSubscription: 'AzureRM-Connection'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    workingDirectory: 'C:\PhillipG'
    inlineScript: |
      az account set --subscription "$(subscriptionId)"

      az group create --name "$(resourceGroup)" --location "$(location)"

      az keyvault create --name "$(keyVaultName)" `
        --resource-group "$(resourceGroup)" `
        --location "$(location)" `
        --enable-rbac-authorization true

      az storage account create `
        --name "$(storageAccount)" `
        --resource-group "$(resourceGroup)" `
        --location "$(location)" `
        --sku Standard_LRS `
        --kind StorageV2

      az storage container create `
        --name "$(containerName)" `
        --account-name "$(storageAccount)"

# 2️⃣ Wait for Key Vault DNS propagation
- powershell: |
    Write-Host "Waiting for Key Vault DNS to propagate..."
    Start-Sleep -Seconds 45
  displayName: 'Wait for DNS'

# 3️⃣ Retrieve secrets AFTER Key Vault exists
- task: AzureKeyVault@2
  displayName: 'Retrieve Secrets from Key Vault'
  inputs:
    azureSubscription: 'AzureRM-Connection'
    KeyVaultName: '$(keyVaultName)'
    SecretsFilter: '*'

# 4️⃣ Verify Azure Resources
- task: AzureCLI@2
  displayName: 'Verify Azure Resources'
  inputs:
    azureSubscription: 'AzureRM-Connection'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az group show --name "$(resourceGroup)"
      az storage account show --name "$(storageAccount)" --resource-group "$(resourceGroup)"
      az keyvault show --name "$(keyVaultName)" --resource-group "$(resourceGroup)"

# 5️⃣ Write Terraform backend config dynamically
- powershell: |
    @"
    terraform {
      backend "azurerm" {
        resource_group_name  = "$(resourceGroup)"
        storage_account_name = "$(storageAccount)"
        container_name       = "$(containerName)"
        key                  = "$(backendKey)"
      }
    }
    "@ | Out-File -FilePath "C:\PhillipG\backend.tf" -Encoding utf8
  displayName: 'Write Terraform Backend Config'

# 6️⃣ Terraform Init
- powershell: |
    terraform init -reconfigure
  displayName: 'Terraform Init'
  workingDirectory: 'C:\PhillipG'

# 7️⃣ Terraform Plan
- powershell: |
    terraform plan -var-file="C:/PhillipG/terraform.tfvars" -out=tfplan
  displayName: 'Terraform Plan'
  workingDirectory: 'C:\PhillipG'
