trigger:
- main  # Change to your branch name

pool:
  name: AzureVM-Pool  # Must match the pool where your Azure VM agent is registered

variables:
  terraformVersion: '1.8.5'
  terraformPath: 'C:\terraform\terraform.exe'
  workingDir: 'C:\azagent'

steps:
# 1. Detect Terraform files
- task: PowerShell@2
  displayName: 'Detect Terraform Directory'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(workingDir)'
    script: |
      Write-Host "Checking for Terraform files in $(workingDir)"
      $tfFiles = Get-ChildItem -Path "$(workingDir)" -Filter *.tf -Recurse
      if ($tfFiles.Count -eq 0) {
        Write-Error "No Terraform (.tf) files found!"
        exit 1
      }

# 2. Install Terraform (skip if already installed)
- task: PowerShell@2
  displayName: 'Install Terraform'
  inputs:
    targetType: 'inline'
    script: |
      if (-Not (Test-Path "$(terraformPath)")) {
        Write-Host "Terraform not found. Installing..."
        Invoke-WebRequest -Uri "https://releases.hashicorp.com/terraform/${env:terraformVersion}/terraform_${env:terraformVersion}_windows_amd64.zip" -OutFile "terraform.zip"
        Expand-Archive -Path "terraform.zip" -DestinationPath "C:\terraform" -Force
        Write-Host "Terraform installed at C:\terraform"
      } else {
        Write-Host "Terraform already installed at $(terraformPath). Skipping installation."
      }

# 3. Authenticate to Azure using OIDC
- task: AzureCLI@2
  displayName: 'OIDC Login'
  inputs:
    azureSubscription: 'My-OIDC-Service-Connection'  # Created in Azure DevOps
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      Write-Host "OIDC authentication successful"

# 4. Terraform Init
- task: PowerShell@2
  displayName: 'Terraform Init'
  inputs:
    targetType: 'inline'
    workingDirectory: '$(workingDir)'
    script: |
      & "$(terraformPath)" init

#